class Nodes:
    """This class creates variable instances for nodes,
    two attributes of nodes are name and node neighbouring partners"""
    
    def __init__(self,name):
        self.name = name
        self.partners = [] #list of node partners


    def addPartners (self, p):
    
        """Takes in partner name and adds it to nodes partner list"""
        
        #checks to see if partner already exists before adding it
        partner_set = set(self.partners)
        if p in partner_set:
            return False
        else:
            self.partners.append(p)
            self.partners.sort() # restore the list to store in ordered order


class adjacencyList:
    """ generates a graph to represent relations of nodes """
    
    linked_nodes = {} #dictionary storing a collection of nodes as tuples of key:value pair

    def addNode(self, node):
        """Takes in nodes and stores in linked nodes dictionay"""

        #checks to see if node variable is of a node object AND checks to see if already exists in linkedNode list

        if node.name in self.linked_nodes: # checks to see if nodes already exist
            if  isinstance not in (node, Nodes): # checks if node added is not of same type/class as nodes
                return False

        else: # adds new node
            self.linked_nodes[node.name]= node
            return True


    def addLinks(self, n1, n2):
        """ takes in two nodes of key:value and links them together """
        
        #checks if both n1 and n2 exist in linkedNodes collection
        
        if n1 and n2 not in self.linked_nodes:
            return False

        
        else: # link key:value (set partners for Nodes class)
            for k, v in self.linked_nodes.items(): #iterate through linkedNodes
                if k is n1: #find node 1 and add node 2 as partner
                    v.addPartners(n2)
                if k is n2: #find node 2 and add node 1 as partner
                    v.addPartners(n1)
            return True

    def displayAdjacencyList(self): # Displays adjacency list graph
        for key in sorted(list(self.linked_nodes)):
            print(key +str(self.linked_nodes[key].partners))


print("Input key:value links, type Stop or End or Nothing to end input",)

while True:
    node1 = str(input("Insert key : "))
    if node1 == 'stop' or node1 == '':
        break
       
    node2 = str(input("Insert value: "))
    if node2 == 'stop' or node2 == '' :
       break
    
    if len(node1) and len(node2) == 1 and node1 or node2 != int :       
        aL = adjacencyList()
        node_1 = Nodes(node1)
        aL.addNode(node_1)
        node_2 = Nodes(node2)
        aL.addNode(node_2)
        aL.addLinks(node1, node2)
        
aL = adjacencyList()
aL.displayAdjacencyList()


